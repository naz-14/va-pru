type RolesCatalog {
  id: Int!
  role_name: String!
  description: String
  id_user_register: Int
  id_user_update: Int
  id_user_delete: Int
}

type returnRole {
  id: Int!
  role_name: String!
  description: String!
}

input RoleInput {
  role_name: String!
  description: String!
  id_user_register: Int
  id_user_update: Int
  id_user_delete: Int
}

type RoleRowsCount {
  rows: [RolesCatalog]
  count: Int
}

type Query {
  getAllRoles(searchQuery: String, limit: Int, offset: Int): RoleRowsCount
  getOneRole(id: Int!): RolesCatalog
}

type Mutation {
  getAllRolesExport: [RolesCatalog]
  createRole(input: RoleInput!): returnRole!
  updateRole(roleId: Int!, input: RoleInput!): Boolean!
  deleteRole(id: Int!, userId: Int!): Boolean!
}
